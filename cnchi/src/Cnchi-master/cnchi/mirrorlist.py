#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  mirrorlist.py
#
#  Copyright Â© 2015 Apricity
#
#  This file is part of Cnchi.
#
#  Cnchi is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  Cnchi is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with Cnchi; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.

import threading
import urllib.request
import urllib.error
import logging
import time
import queue
import urllib.error
import os
import subprocess

import misc.misc as misc
import misc.tz as tz
import misc.timezonemap as timezonemap


class GenerateMirrorListThread(threading.Thread):
    """ Creates a mirror list for pacman based on country code """

    def __init__(self, coords_queue, scripts_dir):
        super(GenerateMirrorListThread, self).__init__()
        self.coords_queue = coords_queue
        self.scripts_dir = scripts_dir
        self.stop_event = threading.Event()
        self.tzdb = tz.Database()

    def stop(self):
        self.stop_event.set()

    @misc.raise_privileges
    def run(self):
        # Wait until there is an Internet connection available
        while not misc.has_connection():
            if self.stop_event.is_set():
                return
            time.sleep(1)  # Delay and try again

        try:
            coords = self.coords_queue.get(True)
            self.coords_queue.put_nowait(coords)
            tzmap = timezonemap.TimezoneMap()
            latitude = float(coords[0])
            longitude = float(coords[1])
            my_timezone = tzmap.get_timezone_at_coords(latitude, longitude)
            loc = self.tzdb.get_loc(my_timezone)
            country_code = ''
            if loc:
                country_code = loc.country
        except (queue.Empty, IndexError):
            logging.warning(_("Can't get the country code used to create a pacman mirrorlist"))
            return

        try:
            url = 'https://www.archlinux.org/mirrorlist/?country={0}&protocol=http&ip_version=4&use_mirror_status=on'
            url = url.format(country_code)
            country_mirrorlist = urllib.request.urlopen(url).read()
            if '<!DOCTYPE' in str(country_mirrorlist, encoding='utf8'):
                # The country doesn't have mirrors so we keep using the mirror list generated by score
                country_mirrorlist = ''
            else:
                with open('/tmp/country_mirrorlist', 'wb') as country_file:
                    country_file.write(country_mirrorlist)
        except urllib.error as url_error:
            txt = _("Couldn't generate mirrorlist for pacman based on country code: %s")
            logging.warning(txt, url_error.reason)
            return

        if country_mirrorlist is not '':
            try:
                script = os.path.join(self.scripts_dir, "generate-mirrorlist.sh")
                subprocess.Popen([script])
                logging.info(_("Downloaded a specific mirrorlist for pacman based on %s country code"), my_timezone)
            except subprocess.CalledProcessError as process_error:
                logging.warning(_("Couldn't generate mirrorlist for pacman based on country code"))
                logging.warning(process_error)
